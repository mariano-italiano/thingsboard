---
- name: Get credentials
  ansible.builtin.shell: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo
  register: getArgoSecret
  
- name: Set fact
  ansible.builtin.set_fact:
    argoPassword: "{{ getArgoSecret.stdout }}"
  no_log: true

- name: List Network Interfaces
  ansible.builtin.shell: "ip addr show | grep '^[0-9]' | awk '{print $2}' | sed 's/://' | grep ^e"
  register: interfaceResult

- name: Get IP Addresses
  ansible.builtin.shell: "ip addr show {{ interfaceResult.stdout }} | grep 'inet ' | awk '{print $2}' | cut -d/ -f1"
  register: output

- name: Save IP Address
  ansible.builtin.set_fact:
    serverIP: "{{ output.stdout }}"

- name: Create token
  ansible.builtin.uri:
    url: https://argocd.{{ serverIP }}.nip.io/api/v1/session
    method: POST
    validate_certs: false
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
    body:
      username: admin
      password: "{{ argoPassword }}"
  register: token

- name: Save token
  ansible.builtin.set_fact:
    bearerToken: "{{ token.json.token }}"
  no_log: true

- name: Create Thingsboard Postgress application
  ansible.builtin.uri:
    url: https://argocd.{{ serverIP }}.nip.io/api/v1/applications
    method: POST
    validate_certs: false
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ bearerToken }}"
    body:
      metadata: 
        name: "{{ ARGOCD-TB-PG-APPNAME }}"
      spec:
        project: "{{ ARGOCD-PROJECT }}"
        source:
          repoURL: "{{ ARGOCD-GIT-URL }}"
          targetRevision: "{{ ARGOCD-GIT-BRANCH }}"
          path: "{{ ARGOCD-TB-PG-GIT-PATH }}"
        destination:
          namespace: "{{ ARGOCD-TB-NAMESPACE }}"
          server: "{{ ARGOCD-K8S-SERVER }}"
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions: ["CreateNamespace=true"]
  register: responsePg

- name: Display API response
  ansible.builtin.debug:
    var: responsePg.content
    verbosity: 3

- name: Wait 30 seconds and let application start
  ansible.builtin.pause:
    seconds: 30

- name: Finalize DB setup
  ansible.builtin.shell: |
    kubectl -n thingsboard wait --for=condition=Ready pod/tb-db-setup --timeout=120s
    kubectl -n thingsboard exec tb-db-setup -- sh -c 'export INSTALL_TB=true; export LOAD_DEMO=true; start-tb-node.sh; touch /tmp/install-finished;'
    kubectl -n thingsboard delete pod tb-db-setup

- name: Create Thingsboard Thirdpaty application
  ansible.builtin.uri:
    url: https://argocd.{{ serverIP }}.nip.io/api/v1/applications
    method: POST
    validate_certs: false
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ bearerToken }}"
    body:
      metadata:
        name: "{{ ARGOCD-TB-TP-APPNAME }}"
      spec:
        project: "{{ ARGOCD-PROJECT }}"
        source:
          repoURL: "{{ ARGOCD-GIT-URL }}"
          targetRevision: "{{ ARGOCD-GIT-BRANCH }}"
          path: "{{ ARGOCD-TB-TP-GIT-PATH }}"
        destination:
          namespace: "{{ ARGOCD-TB-NAMESPACE }}"
          server: "{{ ARGOCD-K8S-SERVER }}"
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions: ["CreateNamespace=true"]
  register: response2

- name: Display API response
  ansible.builtin.debug:
    var: response2.content
    verbosity: 3

- name: Create Thingsboard Main application
  ansible.builtin.uri:
    url: https://argocd.{{ serverIP }}.nip.io/api/v1/applications
    method: POST
    validate_certs: false
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ bearerToken }}"
    body:
      metadata:
        name: "{{ ARGOCD-TB-APPNAME }}"
      spec:
        project: "{{ ARGOCD-PROJECT }}"
        source:
          repoURL: "{{ ARGOCD-GIT-URL }}"
          targetRevision: "{{ ARGOCD-GIT-BRANCH }}"
          path: "{{ ARGOCD-TB-GIT-PATH }}"
        destination:
          namespace: "{{ ARGOCD-TB-NAMESPACE }}"
          server: "{{ ARGOCD-K8S-SERVER }}"
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions: ["CreateNamespace=true"]
  register: response3

- name: Display API response
  ansible.builtin.debug:
    var: response3.content
    verbosity: 3
